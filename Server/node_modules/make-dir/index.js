ted with the given key, or <code>nil</code> if no mapping of the desired type exists for the given key or a <code>nil</code> value is explicitly associated with the key.</p>

<div class="aside aside-note">
    <p class="aside-title">Note</p>
    <p>Conversions between different types of numbers may produce erroneous results. Such as putting an <code>Int64.max</code> for a specific key and getting this value with <code>type: Int8</code>. Conversions are handled in accordance to the behaviour of <code>NSNumber</code>. Further information can be found at <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/index.html">https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/index.html</a>.</p>

</div>

<div class="aside aside-throws">
    <p class="aside-title">Throws</p>
    <p><code>SecureStorageError.Closed</code> if the SecureKeyValueStore is locked with its encryption key.</p>

</div>

<div class="asid		return fsP.stat(pth)
					.then(stats => stats.isDirectory() ? pth : Promise.reject())
					.catch(() => {
						throw err;
					});
			});
	};

	return make(path.resolve(input));
});

module.exports.sync = (input, opts) => {
	checkPath(input);
	opts = Object.assign({}, defaults, opts);

	const make = pth => {
		try {
			opts.fs.mkdirSync(pth, opts.mode);
		} catch (err) {
			if (err.code === 'ENOENT') {
				if (err.message.includes('null bytes') || path.dirname(pth) === pth) {
					throw err;
				}

				make(path.dirname(pth));
				return make(pth);
			}

			try {
				if (!opts.fs.statSync(pth).isDirectory()) {
					throw new Error();
				}
			} catch (_) {
				throw err;
			}
		}

		return pth;
	};

	return make(path.resolve(input));
};
