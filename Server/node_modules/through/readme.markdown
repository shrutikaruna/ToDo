rameterscFT8loginURLV10Foundation3URL14certificateURLS2_11subjectNameSS21subjectAltNamesRfc822SS18subjectAltNamesDNSSS_S0_":{"name":"init(loginURL:certificateURL:subjectName:subjectAltNamesRfc822:subjectAltNamesDNS:)","abstract":"<p>Initializer of SLSConfigurationParameters</p>","parent_name":"SLSConfigurationParameters"},"Structs/SLSConfigurationParameters.html#/s:FV13SAPFoundation26SLSConfigurationParameterscFT12slsServerURLV10Foundation3URL7profileSS11subjectNameSS21subjectAltNamesRfc822SS18subjectAltNamesDNSSS_GSqS0__":{"name":"init(slsServerURL:profile:subjectName:subjectAltNamesRfc822:subjectAltNamesDNS:)","abstract":"<p>Initializer of SLSConfigurationParameters</p>","parent_name":"SLSConfigurationParameters"},"Structs/SLSConfigurationParameters.html#/s:FV13SAPFoundation26SLSConfigurationParameterscFT7baseURLV10Foundation3URL13applicationIDSS11subjectNameSS21subjectAltNamesRfc822SS18subjectAltNamesDNSSS_GSqS0__":{"name":"init(baseURL:applicationID:subjectName:subjectAltNamesRfc822:subjectAltNamesDNS:)",#through

[![build status](https://secure.travis-ci.org/dominictarr/through.png)](http://travis-ci.org/dominictarr/through)
[![testling badge](https://ci.testling.com/dominictarr/through.png)](https://ci.testling.com/dominictarr/through)

Easy way to create a `Stream` that is both `readable` and `writable`. 

* Pass in optional `write` and `end` methods.
* `through` takes care of pause/resume logic if you use `this.queue(data)` instead of `this.emit('data', data)`.
* Use `this.pause()` and `this.resume()` to manage flow.
* Check `this.paused` to see current flow state. (`write` always returns `!this.paused`).

This function is the ba